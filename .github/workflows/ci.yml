name: CI Pipeline Multi-Stage

# Déclencheurs du workflow
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

# Variables globales
env:
  NODE_ENV: test

jobs:
  # Job principal avec matrice
  ci:
    name: CI (${{ matrix.os }}, Node ${{ matrix.node-version }})
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        node-version: [16, 18]
      fail-fast: false

    steps:
    # 1. Récupérer le code source
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    # 2. Configurer Node.js
    - name: 🔧 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    # 3. Cache avancé pour les dépendances
    - name: 💾 Cache node modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.npm
          node_modules
        key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ matrix.node-version }}-
          ${{ runner.os }}-node-

    # 4. Installation des dépendances
    - name: 📦 Install dependencies
      run: npm ci

    # 5. STAGE LINT - Vérification du code
    - name: 🔍 Run ESLint
      run: npm run lint

    # 6. STAGE TEST - Exécution des tests
    - name: 🧪 Run tests
      run: npm run test

    # 7. STAGE COVERAGE - Génération du rapport de couverture
    - name: 📊 Generate test coverage
      run: npm run test:coverage
      continue-on-error: true

    # 8. STAGE BUILD - Construction du projet
    - name: 🏗️ Build project
      run: npm run build
      if: success() # Ne build que si tout le reste a réussi

    # 9. Upload des artifacts de build
    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ matrix.os }}-node${{ matrix.node-version }}
        path: |
          dist/
          package.json
        retention-days: 7
      if: success()

    # 10. Upload des rapports de couverture
    - name: 📈 Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ matrix.os }}-node${{ matrix.node-version }}
        path: coverage/
        retention-days: 7
      if: always() # Upload même si les tests échouent

  # Job de synthèse
  build-summary:
    name: 📋 Build Summary
    runs-on: ubuntu-latest
    needs: ci
    if: always()
    
    steps:
    - name: 📊 Job Summary
      run: |
        echo "## 🎯 CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|---------|" >> $GITHUB_STEP_SUMMARY
        echo "| Lint | ${{ needs.ci.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Test | ${{ needs.ci.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build | ${{ needs.ci.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🏗️ Matrix Build Results:" >> $GITHUB_STEP_SUMMARY
        echo "- Ubuntu + Node 16" >> $GITHUB_STEP_SUMMARY
        echo "- Ubuntu + Node 18" >> $GITHUB_STEP_SUMMARY  
        echo "- Windows + Node 16" >> $GITHUB_STEP_SUMMARY
        echo "- Windows + Node 18" >> $GITHUB_STEP_SUMMARY
